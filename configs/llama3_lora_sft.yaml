### ───────── model ─────────
model_name_or_path: ./models/base/Meta-Llama-3-8B-Instruct
trust_remote_code: true
quantization_bit: 8        # QLoRA → fits 8 B on 24 GB GPU

### ───────── method ───────
stage: sft
do_train: true
finetuning_type: lora
lora_rank: 64              # reduce to 8 if VRAM is <24 GB
lora_target: all           # inject LoRA into all linear layers
flash_attn: auto           # use FlashAttention if GPU supports

### ───────── dataset ──────
dataset_dir: ./data_processed
dataset: sft_train         # must match key in dataset_info.json
template: llama3           # let LF use Llama-3 chat template
cutoff_len: 2048
val_size: 0.1              # 10 % of 25 → 2–3 samples for quick eval
overwrite_cache: true
preprocessing_num_workers: 8
dataloader_num_workers: 2
max_samples: 1000          # hard cap (not hit with 25 rows)

### ───────── output ───────
output_dir: ./models/adapters/llama3_lora
logging_steps: 10
save_steps: 200
plot_loss: true
overwrite_output_dir: true
save_only_model: false
report_to: none            # [none | wandb | tensorboard | …]

### ───────── train ────────
per_device_train_batch_size: 4     # effective batch = 4×8 = 32
gradient_accumulation_steps: 8
learning_rate: 2.0e-4
num_train_epochs: 3.0
lr_scheduler_type: cosine
warmup_ratio: 0.1
bf16: true
ddp_timeout: 180000000
resume_from_checkpoint: null

### ───────── eval (quick sanity) ────────
eval_strategy: steps
eval_steps: 200
per_device_eval_batch_size: 1